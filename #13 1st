"""
Generate a string with N opening brackets ("[") and N closing brackets ("]"), in some arbitrary order. Then Determine whether the generated string is
balanced; that is, whether it consists entirely of pairs of opening/closing brackets (in that order), none of which mis-nest.
"""

import re

def brackets(bracket_string):
    # Update only the temp string.
    temp = bracket_string
    
    # Remove all white spaces.
    temp = re.sub(r'\s', '', temp)

    # Remove all found pairs of brackets using regex
    while len(re.findall(r'\[\]', temp)) > 0:
        temp = re.sub(r'\[\]', '', temp)

    # If after removing all pairs of brackets the string is still not empty
    if len(temp) > 0:
        print(bracket_string, 'NOT OK')
    else:
        print(bracket_string, 'OK')

brackets('[][][][[]]')
brackets('[ ]')
brackets('][ [][]')
brackets('][][[[][]]')
brackets('[]][[]')
